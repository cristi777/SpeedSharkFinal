//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpeedSharkWeb.SessionServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/SpeedSharkWCF")]
    [System.SerializableAttribute()]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ArrivalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CargoIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DepartureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TruckIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ArrivalTime {
            get {
                return this.ArrivalTimeField;
            }
            set {
                if ((this.ArrivalTimeField.Equals(value) != true)) {
                    this.ArrivalTimeField = value;
                    this.RaisePropertyChanged("ArrivalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CargoId {
            get {
                return this.CargoIdField;
            }
            set {
                if ((this.CargoIdField.Equals(value) != true)) {
                    this.CargoIdField = value;
                    this.RaisePropertyChanged("CargoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DepartureTime {
            get {
                return this.DepartureTimeField;
            }
            set {
                if ((this.DepartureTimeField.Equals(value) != true)) {
                    this.DepartureTimeField = value;
                    this.RaisePropertyChanged("DepartureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestAddress {
            get {
                return this.DestAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.DestAddressField, value) != true)) {
                    this.DestAddressField = value;
                    this.RaisePropertyChanged("DestAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestCity {
            get {
                return this.DestCityField;
            }
            set {
                if ((object.ReferenceEquals(this.DestCityField, value) != true)) {
                    this.DestCityField = value;
                    this.RaisePropertyChanged("DestCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TruckId {
            get {
                return this.TruckIdField;
            }
            set {
                if ((this.TruckIdField.Equals(value) != true)) {
                    this.TruckIdField = value;
                    this.RaisePropertyChanged("TruckId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SessionServiceReference.ISessionService")]
    public interface ISessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/insertSession", ReplyAction="http://tempuri.org/ISessionService/insertSessionResponse")]
        void insertSession(int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/insertSession", ReplyAction="http://tempuri.org/ISessionService/insertSessionResponse")]
        System.Threading.Tasks.Task insertSessionAsync(int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/updateSession", ReplyAction="http://tempuri.org/ISessionService/updateSessionResponse")]
        void updateSession(int sessionId, int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/updateSession", ReplyAction="http://tempuri.org/ISessionService/updateSessionResponse")]
        System.Threading.Tasks.Task updateSessionAsync(int sessionId, int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/getSession", ReplyAction="http://tempuri.org/ISessionService/getSessionResponse")]
        SpeedSharkWeb.SessionServiceReference.Session getSession(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/getSession", ReplyAction="http://tempuri.org/ISessionService/getSessionResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.SessionServiceReference.Session> getSessionAsync(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/getSessions", ReplyAction="http://tempuri.org/ISessionService/getSessionsResponse")]
        SpeedSharkWeb.SessionServiceReference.Session[] getSessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/getSessions", ReplyAction="http://tempuri.org/ISessionService/getSessionsResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.SessionServiceReference.Session[]> getSessionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/getOngoingSessions", ReplyAction="http://tempuri.org/ISessionService/getOngoingSessionsResponse")]
        SpeedSharkWeb.SessionServiceReference.Session[] getOngoingSessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/getOngoingSessions", ReplyAction="http://tempuri.org/ISessionService/getOngoingSessionsResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.SessionServiceReference.Session[]> getOngoingSessionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionServiceChannel : SpeedSharkWeb.SessionServiceReference.ISessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionServiceClient : System.ServiceModel.ClientBase<SpeedSharkWeb.SessionServiceReference.ISessionService>, SpeedSharkWeb.SessionServiceReference.ISessionService {
        
        public SessionServiceClient() {
        }
        
        public SessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void insertSession(int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity) {
            base.Channel.insertSession(cargoId, departureTime, arrivalTime, truckId, destAddress, destCity);
        }
        
        public System.Threading.Tasks.Task insertSessionAsync(int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity) {
            return base.Channel.insertSessionAsync(cargoId, departureTime, arrivalTime, truckId, destAddress, destCity);
        }
        
        public void updateSession(int sessionId, int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity) {
            base.Channel.updateSession(sessionId, cargoId, departureTime, arrivalTime, truckId, destAddress, destCity);
        }
        
        public System.Threading.Tasks.Task updateSessionAsync(int sessionId, int cargoId, string departureTime, string arrivalTime, int truckId, string destAddress, string destCity) {
            return base.Channel.updateSessionAsync(sessionId, cargoId, departureTime, arrivalTime, truckId, destAddress, destCity);
        }
        
        public SpeedSharkWeb.SessionServiceReference.Session getSession(int sessionId) {
            return base.Channel.getSession(sessionId);
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.SessionServiceReference.Session> getSessionAsync(int sessionId) {
            return base.Channel.getSessionAsync(sessionId);
        }
        
        public SpeedSharkWeb.SessionServiceReference.Session[] getSessions() {
            return base.Channel.getSessions();
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.SessionServiceReference.Session[]> getSessionsAsync() {
            return base.Channel.getSessionsAsync();
        }
        
        public SpeedSharkWeb.SessionServiceReference.Session[] getOngoingSessions() {
            return base.Channel.getOngoingSessions();
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.SessionServiceReference.Session[]> getOngoingSessionsAsync() {
            return base.Channel.getOngoingSessionsAsync();
        }
    }
}

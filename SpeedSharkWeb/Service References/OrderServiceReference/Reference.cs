//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpeedSharkWeb.OrderServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/SpeedSharkWCF")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CargoIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustCvrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CargoId {
            get {
                return this.CargoIdField;
            }
            set {
                if ((this.CargoIdField.Equals(value) != true)) {
                    this.CargoIdField = value;
                    this.RaisePropertyChanged("CargoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustCvr {
            get {
                return this.CustCvrField;
            }
            set {
                if ((object.ReferenceEquals(this.CustCvrField, value) != true)) {
                    this.CustCvrField = value;
                    this.RaisePropertyChanged("CustCvr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((this.OrderIdField.Equals(value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderServiceReference.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/insertOrder", ReplyAction="http://tempuri.org/IOrderService/insertOrderResponse")]
        void insertOrder(string custCVR, double price, int sessionId, int cargoId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/insertOrder", ReplyAction="http://tempuri.org/IOrderService/insertOrderResponse")]
        System.Threading.Tasks.Task insertOrderAsync(string custCVR, double price, int sessionId, int cargoId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/updateOrder", ReplyAction="http://tempuri.org/IOrderService/updateOrderResponse")]
        void updateOrder(int orderId, string custCVR, double price, int sessionId, int cargoId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/updateOrder", ReplyAction="http://tempuri.org/IOrderService/updateOrderResponse")]
        System.Threading.Tasks.Task updateOrderAsync(int orderId, string custCVR, double price, int sessionId, int cargoId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/getOrder", ReplyAction="http://tempuri.org/IOrderService/getOrderResponse")]
        SpeedSharkWeb.OrderServiceReference.Order getOrder(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/getOrder", ReplyAction="http://tempuri.org/IOrderService/getOrderResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.OrderServiceReference.Order> getOrderAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/getOrders", ReplyAction="http://tempuri.org/IOrderService/getOrdersResponse")]
        SpeedSharkWeb.OrderServiceReference.Order[] getOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/getOrders", ReplyAction="http://tempuri.org/IOrderService/getOrdersResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.OrderServiceReference.Order[]> getOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/getComletedOrders", ReplyAction="http://tempuri.org/IOrderService/getComletedOrdersResponse")]
        SpeedSharkWeb.OrderServiceReference.Order[] getComletedOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/getComletedOrders", ReplyAction="http://tempuri.org/IOrderService/getComletedOrdersResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.OrderServiceReference.Order[]> getComletedOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/cancelOrder", ReplyAction="http://tempuri.org/IOrderService/cancelOrderResponse")]
        void cancelOrder(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/cancelOrder", ReplyAction="http://tempuri.org/IOrderService/cancelOrderResponse")]
        System.Threading.Tasks.Task cancelOrderAsync(int sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : SpeedSharkWeb.OrderServiceReference.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<SpeedSharkWeb.OrderServiceReference.IOrderService>, SpeedSharkWeb.OrderServiceReference.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void insertOrder(string custCVR, double price, int sessionId, int cargoId, string status) {
            base.Channel.insertOrder(custCVR, price, sessionId, cargoId, status);
        }
        
        public System.Threading.Tasks.Task insertOrderAsync(string custCVR, double price, int sessionId, int cargoId, string status) {
            return base.Channel.insertOrderAsync(custCVR, price, sessionId, cargoId, status);
        }
        
        public void updateOrder(int orderId, string custCVR, double price, int sessionId, int cargoId, string status) {
            base.Channel.updateOrder(orderId, custCVR, price, sessionId, cargoId, status);
        }
        
        public System.Threading.Tasks.Task updateOrderAsync(int orderId, string custCVR, double price, int sessionId, int cargoId, string status) {
            return base.Channel.updateOrderAsync(orderId, custCVR, price, sessionId, cargoId, status);
        }
        
        public SpeedSharkWeb.OrderServiceReference.Order getOrder(int orderId) {
            return base.Channel.getOrder(orderId);
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.OrderServiceReference.Order> getOrderAsync(int orderId) {
            return base.Channel.getOrderAsync(orderId);
        }
        
        public SpeedSharkWeb.OrderServiceReference.Order[] getOrders() {
            return base.Channel.getOrders();
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.OrderServiceReference.Order[]> getOrdersAsync() {
            return base.Channel.getOrdersAsync();
        }
        
        public SpeedSharkWeb.OrderServiceReference.Order[] getComletedOrders() {
            return base.Channel.getComletedOrders();
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.OrderServiceReference.Order[]> getComletedOrdersAsync() {
            return base.Channel.getComletedOrdersAsync();
        }
        
        public void cancelOrder(int sessionId) {
            base.Channel.cancelOrder(sessionId);
        }
        
        public System.Threading.Tasks.Task cancelOrderAsync(int sessionId) {
            return base.Channel.cancelOrderAsync(sessionId);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpeedSharkWeb.CargoServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cargo", Namespace="http://schemas.datacontract.org/2004/07/SpeedSharkWCF")]
    [System.SerializableAttribute()]
    public partial class Cargo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CargoIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CargoId {
            get {
                return this.CargoIdField;
            }
            set {
                if ((this.CargoIdField.Equals(value) != true)) {
                    this.CargoIdField = value;
                    this.RaisePropertyChanged("CargoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CargoServiceReference.ICargoService")]
    public interface ICargoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/insertCargo", ReplyAction="http://tempuri.org/ICargoService/insertCargoResponse")]
        void insertCargo(double weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/insertCargo", ReplyAction="http://tempuri.org/ICargoService/insertCargoResponse")]
        System.Threading.Tasks.Task insertCargoAsync(double weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/getCargo", ReplyAction="http://tempuri.org/ICargoService/getCargoResponse")]
        SpeedSharkWeb.CargoServiceReference.Cargo getCargo(int cargoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/getCargo", ReplyAction="http://tempuri.org/ICargoService/getCargoResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.CargoServiceReference.Cargo> getCargoAsync(int cargoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/updateCargo", ReplyAction="http://tempuri.org/ICargoService/updateCargoResponse")]
        void updateCargo(int cargoId, double weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/updateCargo", ReplyAction="http://tempuri.org/ICargoService/updateCargoResponse")]
        System.Threading.Tasks.Task updateCargoAsync(int cargoId, double weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/getCargoes", ReplyAction="http://tempuri.org/ICargoService/getCargoesResponse")]
        SpeedSharkWeb.CargoServiceReference.Cargo[] getCargoes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/getCargoes", ReplyAction="http://tempuri.org/ICargoService/getCargoesResponse")]
        System.Threading.Tasks.Task<SpeedSharkWeb.CargoServiceReference.Cargo[]> getCargoesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/getMaxId", ReplyAction="http://tempuri.org/ICargoService/getMaxIdResponse")]
        int getMaxId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICargoService/getMaxId", ReplyAction="http://tempuri.org/ICargoService/getMaxIdResponse")]
        System.Threading.Tasks.Task<int> getMaxIdAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICargoServiceChannel : SpeedSharkWeb.CargoServiceReference.ICargoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CargoServiceClient : System.ServiceModel.ClientBase<SpeedSharkWeb.CargoServiceReference.ICargoService>, SpeedSharkWeb.CargoServiceReference.ICargoService {
        
        public CargoServiceClient() {
        }
        
        public CargoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CargoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CargoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CargoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void insertCargo(double weight) {
            base.Channel.insertCargo(weight);
        }
        
        public System.Threading.Tasks.Task insertCargoAsync(double weight) {
            return base.Channel.insertCargoAsync(weight);
        }
        
        public SpeedSharkWeb.CargoServiceReference.Cargo getCargo(int cargoId) {
            return base.Channel.getCargo(cargoId);
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.CargoServiceReference.Cargo> getCargoAsync(int cargoId) {
            return base.Channel.getCargoAsync(cargoId);
        }
        
        public void updateCargo(int cargoId, double weight) {
            base.Channel.updateCargo(cargoId, weight);
        }
        
        public System.Threading.Tasks.Task updateCargoAsync(int cargoId, double weight) {
            return base.Channel.updateCargoAsync(cargoId, weight);
        }
        
        public SpeedSharkWeb.CargoServiceReference.Cargo[] getCargoes() {
            return base.Channel.getCargoes();
        }
        
        public System.Threading.Tasks.Task<SpeedSharkWeb.CargoServiceReference.Cargo[]> getCargoesAsync() {
            return base.Channel.getCargoesAsync();
        }
        
        public int getMaxId() {
            return base.Channel.getMaxId();
        }
        
        public System.Threading.Tasks.Task<int> getMaxIdAsync() {
            return base.Channel.getMaxIdAsync();
        }
    }
}
